using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;
using System.Net;

namespace TokenGen
{
    class Program
    {

		public static string GetUniqueUSG(int maxSize)
		{
			char[] array = new char[62];
			array = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".ToCharArray();
			byte[] array2 = new byte[1];
			RNGCryptoServiceProvider rngcryptoServiceProvider = new RNGCryptoServiceProvider();
			rngcryptoServiceProvider.GetNonZeroBytes(array2);
			array2 = new byte[maxSize];
			rngcryptoServiceProvider.GetNonZeroBytes(array2);
			StringBuilder stringBuilder = new StringBuilder(maxSize);
			foreach (byte b in array2)
			{
				stringBuilder.Append(array[(int)b % array.Length]);
			}
			return stringBuilder.ToString();
		}

		// Token: 0x06000002 RID: 2 RVA: 0x000020D0 File Offset: 0x000002D0
		public static string GetUniqueUSG2(int maxSize)
		{
			char[] array = new char[62];
			array = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-_".ToCharArray();
			byte[] array2 = new byte[1];
			RNGCryptoServiceProvider rngcryptoServiceProvider = new RNGCryptoServiceProvider();
			rngcryptoServiceProvider.GetNonZeroBytes(array2);
			array2 = new byte[maxSize];
			rngcryptoServiceProvider.GetNonZeroBytes(array2);
			StringBuilder stringBuilder = new StringBuilder(maxSize);
			foreach (byte b in array2)
			{
				stringBuilder.Append(array[(int)b % array.Length]);
			}
			return stringBuilder.ToString();
		}
		static void Main(string[] args)
        {


		

				Console.ForegroundColor = ConsoleColor.Red;
				Console.WriteLine(@"  ______                              __              
    /            /                  /    )            
---/-------__---/-__----__----__---/---------__----__-
  /      /   ) /(     /___) /   ) /  --,   /___) /   )
_/______(___/_/___\__(___ _/___/_(____/___(___ _/___/_");
				Console.ForegroundColor = ConsoleColor.Green;
				Console.WriteLine("Tokens are being saved in Saved.txt");
				Console.WriteLine("Made by JustMyLife");

				FileStream ostrm;
				StreamWriter writer;
				TextWriter oldOut = Console.Out;
				try
				{
					ostrm = new FileStream("./Saved.txt", FileMode.OpenOrCreate, FileAccess.Write);
					writer = new StreamWriter(ostrm);
				}
				catch (Exception e)
				{
					Console.ForegroundColor = ConsoleColor.Red;
					Console.WriteLine("Cannot open Saved.txt for writing");
					Console.WriteLine(e.Message);
					return;
				}
				Console.SetOut(writer);





				for (int i = 0; i < 2147483647; i++)
				{
					Console.ForegroundColor = ConsoleColor.White;

					Console.Write(string.Concat(new string[]
					{
					"NDc0N",
					Program.GetUniqueUSG(19),
					".D",
					Program.GetUniqueUSG2(5),
					".",
					Program.GetUniqueUSG2(27),
					"\n"
					}), ConsoleColor.Blue, 14);
					Console.Title = "Generated tokens: " + i;

				}
				Console.ReadKey();

				Console.SetOut(oldOut);
				writer.Close();
				ostrm.Close();
				Console.WriteLine("Done");



			
			Console.ReadLine();


		}
    }
}
